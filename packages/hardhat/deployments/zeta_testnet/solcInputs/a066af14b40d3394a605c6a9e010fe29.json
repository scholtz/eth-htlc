{
  "language": "Solidity",
  "sources": {
    "contracts/EscrowContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint amount) external returns (bool);\r\n}\r\n\r\ncontract EscrowContract {\r\n    struct Escrow {\r\n        uint64 createdTime;\r\n        uint64 rescueTime;\r\n        address tokenAddress; // address(0) for ETH\r\n        uint256 amount;\r\n        address creator;\r\n        address taker;\r\n        bytes32 secretHash;\r\n    }\r\n\r\n    address public admin;\r\n    mapping(bytes32 => Escrow) public escrows;\r\n    mapping(address => uint256) public totalDeposits;\r\n\r\n    // EVENTS\r\n    event EscrowCreated(\r\n        bytes32 indexed secretHash,\r\n        address indexed creator,\r\n        address indexed taker,\r\n        address tokenAddress,\r\n        uint256 amount,\r\n        uint64 rescueTime\r\n    );\r\n\r\n    event EscrowWithdrawn(\r\n        bytes32 indexed secretHash,\r\n        address indexed taker,\r\n        uint256 amount\r\n    );\r\n\r\n    event EscrowCancelled(\r\n        bytes32 indexed secretHash,\r\n        address indexed creator,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function create(\r\n        address tokenAddress,\r\n        uint256 amount,\r\n        uint64 rescueDelay,\r\n        bytes32 secretHash,\r\n        address taker\r\n    ) external payable {\r\n        require(secretHash != bytes32(0), \"Secret hash cannot be empty\");\r\n        require(escrows[secretHash].creator == address(0), \"Escrow already exists\");\r\n\r\n        uint256 depositAmount = amount;\r\n        if (tokenAddress == address(0)) {\r\n            require(msg.value == depositAmount, \"Incorrect ETH sent\");\r\n        } else {\r\n            require(IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount), \"Token transfer failed\");\r\n        }\r\n\r\n        escrows[secretHash] = Escrow({\r\n            createdTime: uint64(block.timestamp),\r\n            rescueTime: uint64(block.timestamp + rescueDelay),\r\n            tokenAddress: tokenAddress,\r\n            amount: amount,\r\n            creator: msg.sender,\r\n            taker: taker,\r\n            secretHash: secretHash\r\n        });\r\n\r\n        totalDeposits[tokenAddress] += depositAmount;\r\n\r\n        emit EscrowCreated(secretHash, msg.sender, taker, tokenAddress, amount, uint64(block.timestamp + rescueDelay));\r\n    }\r\n\r\n    function withdraw(bytes32 secretHash, bytes calldata secret) external {\r\n        Escrow memory escrow = escrows[secretHash];\r\n        require(escrow.creator != address(0), \"Escrow does not exist\");\r\n        require(block.timestamp < escrow.rescueTime, \"Rescue time passed\");\r\n        require(keccak256(abi.encodePacked(secret)) == secretHash, \"Incorrect secret\");\r\n\r\n        address recipient = escrow.taker == address(0) ? msg.sender : escrow.taker;\r\n        _send(recipient, escrow.tokenAddress, escrow.amount);\r\n        delete escrows[secretHash];\r\n\r\n        emit EscrowWithdrawn(secretHash, recipient, escrow.amount);\r\n    }\r\n\r\n    function cancel(bytes32 secretHash) external {\r\n        Escrow memory escrow = escrows[secretHash];\r\n        require(escrow.creator != address(0), \"Escrow does not exist\");\r\n        require(block.timestamp >= escrow.rescueTime, \"Rescue time not passed\");\r\n\r\n        delete escrows[secretHash];\r\n        _send(escrow.creator, escrow.tokenAddress, escrow.amount);\r\n\r\n        emit EscrowCancelled(secretHash, escrow.creator, escrow.amount);\r\n    }\r\n\r\n    function _send(address to, address token, uint256 amount) internal {\r\n        totalDeposits[token] -= amount;\r\n        if (token == address(0)) {\r\n            (bool sent, ) = to.call{value: amount}(\"\");\r\n            require(sent, \"ETH transfer failed\");\r\n        } else {\r\n            require(IERC20(token).transfer(to, amount), \"Token transfer failed\");\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}